import pandas as pdimport osimport psycopg2import urllib.parsefrom urllib.parse import urlparseimport urllib.requestimport jsonimport requestsfrom apscheduler.schedulers.blocking import BlockingSchedulerfrom bs4 import BeautifulSoupimport reimport loggingfrom datetime import datetimefrom dateutil.tz import tzlocalfrom sqlalchemy import create_engineimport lxmlfrom datetime import dateimport numpy as npimport html5libimport randomfrom itertools import repeatfrom scipy import statsimport io'''logging.basicConfig() DATABASE_URL = 'postgres://wgmfozowgyxule:8c7255974c879789e50b5c05f07bf00947050fbfbfc785bd970a8bc37561a3fb@ec2-44-195-16-34.compute-1.amazonaws.com:5432/d5o6bqguvvlm63'print(DATABASE_URL)#replace 'postgres' with 'postgresql' in the database URL since SQLAlchemy stopped supporting 'postgres' SQLALCHEMY_DATABASE_URI = DATABASE_URL.replace('postgres://', 'postgresql://')conn = psycopg2.connect(SQLALCHEMY_DATABASE_URI, sslmode='require')engine = create_engine(SQLALCHEMY_DATABASE_URI)'''now = datetime.now(tzlocal()).strftime('%Y-%m-%d %H:%M:%S %Z')powers = {'B': 10 ** 9, 'K': 10 ** 3, 'M': 10 ** 6, 'T': 10 ** 12}# add some more to powers as necessarydef formatstr(s):    try:        power = s[-1]        if (power.isdigit()):            return s        else:            return float(s[:-1]) * powers[power]    except TypeError:        return sdef exportScratcherRecs():    url = "https://www.molottery.com/scratchers/?type=all"    payload = ""    headers = {        'Cookie': 'incap_ses_1458_2143742=iIdGEMj+ECj51ZUHpts7FGw4XWMAAAAAfGo/0vdFFuY6L5QELZdtTg==; lottery-track=42ca0a2.5ec2cd1330bff; nlbi_2143742=ECYdLKjyZG8ItsXPsZUu4QAAAACousb+YvwyeM3QBYQGjqaT; visid_incap_2143742=2sOJh/4QR9Kzu8WOBe7lTlMyXWMAAAAAQUIPAAAAAABEyHQLItGNVhorQjN8YfiH'    }    r = requests.request("GET", url, headers=headers, data=payload)    response = r.text    soup = BeautifulSoup(response, 'html.parser')    tixlist = pd.DataFrame(        columns=['gameName', 'gameNumber', 'price', 'gameURL'])    table = soup.find_all(class_=['scratchers-list__item'])    tixrow = pd.DataFrame()    tixtables = pd.DataFrame(columns=['gameNumber', 'gameName', 'price', 'prizeamount', 'startDate', 'endDate',                             'lastdatetoclaim', 'overallodds', 'Winning Tickets At Start', 'Winning Tickets Unclaimed', 'dateexported'])    # loop through the HTML sections to get the top level game data    for s in table:        itemback = s.find(class_=['scratchers-list__back'])        gameName = itemback.find(            class_='scratchers-list__title').find('span').get_text(strip=True)        gameNumber = itemback.find(            class_='scratchers-list__num').get_text(strip=True).replace('#', '')        gamePrice = itemback.find_all(            class_='scratchers-list__value')[2].get_text(strip=True).replace('$', '')        topprize = itemback.find_all(            class_='scratchers-list__value')[3].get_text(strip=True).replace('$', '')        startDate = itemback.find_all(            class_='scratchers-list__value')[0].get_text(strip=True)        endDate = itemback.find_all(class_='scratchers-list__value')[1].get_text(strip=True)        totalMoneyWon = itemback.find_all(            class_='scratchers-list__value')[4].get_text(strip=True).replace('$', '').replace(',', '')        totalMoneyUnclaimed = itemback.find_all(            class_='scratchers-list__value')[5].get_text(strip=True).replace('$', '').replace(',', '')        totalMoneyStart = int(totalMoneyWon)+int(totalMoneyUnclaimed)        percentMoneyClaimed = int(totalMoneyWon)/int(totalMoneyStart)        gameURL = 'https://www.molottery.com/scratchers/'+gameNumber        # download the MO scratcher tile images to folder        file_name = "moscratchers_"+gameNumber+'.gif'        #download_image(gameURL, './gameimages/', file_name)        # get photo from where it was saved        gamePhoto = 'https://www.scratcherstats.com/wp-content/uploads/gameimages/'+file_name        #gamePhoto = 'https://www.molottery.com/sites/default/files/scratchers/tile/'+gameNumber+'.gif'        tixlist.loc[len(tixlist.index), ['price', 'gameName', 'gameNumber', 'topprize', 'startDate', 'endDate', 'Total Prize Money at start', 'Total Prize Money Won', 'Total Prize Money remaining', 'Percent of Prize Money Won', 'gameURL', 'gamePhoto']] = [            gamePrice, gameName, gameNumber, topprize, startDate, endDate, totalMoneyStart, totalMoneyWon, totalMoneyUnclaimed, percentMoneyClaimed, gameURL, gamePhoto]        # go to the individual page for this scratcher game and get the table data        url = "https://www.molottery.com/scratchers/"+gameNumber        payload = ''        headers = {            'Accept': '*/*',            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36',        }        r = requests.get(url=url, headers=headers)        response = r.text        soup = BeautifulSoup(response, 'html.parser')        singletixinfo = soup.find(            class_=['scratchers-single__info scratchers-single-info'])        lastdatetoclaim = singletixinfo.find_all(            class_='scratchers-single-info__body')[2].string        overallodds = singletixinfo.find_all(            class_='scratchers-single-info__body')[5].string.replace('1 in ', '')        tixdata = soup.find(class_=['table-mo table_highlight-first'])        tixdata = pd.read_html(io.StringIO(str(tixdata)))[0]        tixdata['gameNumber'] = gameNumber        tixdata['gameName'] = gameName        tixdata['price'] = gamePrice        tixdata['overallodds'] = overallodds        tixdata['topprize'] = tixdata.iloc[-1,                                           0].replace('$', '').replace(',', '')        tixdata['topprizestarting'] = tixdata.iloc[-1, 1]        tixdata['topprizeremain'] = tixdata.iloc[-1, 2]        tixdata['topprizeavail'] = 'Top Prize Claimed' if tixdata.iloc[-1,                                                                       2] == 0 else np.nan        tixdata['startDate'] = startDate        tixdata['endDate'] = endDate        tixdata['lastdatetoclaim'] = lastdatetoclaim        tixdata['extrachances'] = None        tixdata['secondChance'] = None        tixdata['dateexported'] = date.today()        tixdata['gameURL'] = gameURL        tixdata.rename(columns={'Prize Level': 'prizeamount', 'Total Prizes': 'Winning Tickets At Start',                       'Unclaimed Prizes': 'Winning Tickets Unclaimed'}, inplace=True)        tixdata['prizeamount'] = tixdata['prizeamount'].str.replace(            '$', '',regex=False).str.replace(',', '',regex=False)        if tixdata.empty:            continue        else:            tixtables = pd.concat([tixtables, tixdata], axis=0)    tixlist.to_csv("./MOtixlist.csv", encoding='utf-8')    scratchersall = tixtables.loc[:,['price', 'gameName', 'gameNumber', 'topprize', 'overallodds', 'topprizestarting', 'topprizeremain',                               'topprizeavail', 'extrachances', 'secondChance', 'startDate', 'endDate', 'lastdatetoclaim', 'dateexported','gameURL']]    scratchersall = scratchersall.loc[scratchersall['gameNumber']                                      != "Coming Soon!", :]    scratchersall = scratchersall.drop_duplicates()    # save scratchers list    #scratchersall.to_sql('MOscratcherlist', engine, if_exists='replace')    scratchersall.to_csv("./MOscratcherslist.csv", encoding='utf-8')    # Create scratcherstables df, with calculations of total tix and total tix without prizes    scratchertables = tixtables.loc[:,['gameNumber', 'gameName', 'prizeamount',                                 'Winning Tickets At Start', 'Winning Tickets Unclaimed', 'dateexported']]    scratchertables.to_csv("./MOscratchertables.csv", encoding='utf-8')    scratchertables = scratchertables.loc[scratchertables['gameNumber']                                          != "Coming Soon!", :]    # Get sum of tickets for all prizes by grouping by game number and then calculating with overall odds from scratchersall    # Select columns first, then groupby and aggregate    cols_to_sum = ['Winning Tickets At Start', 'Winning Tickets Unclaimed']    gamesgrouped = scratchertables.groupby(        by=['gameNumber', 'gameName', 'dateexported'], group_keys=False)[cols_to_sum].sum().reset_index() # reset_index() without levels works here        gamesgrouped = gamesgrouped.merge(scratchersall.loc[:, [                                      'gameNumber', 'price', 'topprizestarting', 'topprizeremain', 'overallodds']], how='left', on=['gameNumber'])    gamesgrouped.loc[:, 'Total at start'] = gamesgrouped['Winning Tickets At Start'] * \        gamesgrouped['overallodds'].astype(float)    gamesgrouped.loc[:, 'Total remaining'] = gamesgrouped['Winning Tickets Unclaimed'] * \        gamesgrouped['overallodds'].astype(float)    gamesgrouped.loc[:, 'Non-prize at start'] = gamesgrouped['Total at start'] - \        gamesgrouped['Winning Tickets At Start']    gamesgrouped.loc[:, 'Non-prize remaining'] = gamesgrouped['Total remaining'] - \        gamesgrouped['Winning Tickets Unclaimed']    try:        gamesgrouped['topprizeodds'] = gamesgrouped['Total remaining'] / gamesgrouped['topprizeremain']    except ZeroDivisionError:        gamesgrouped['topprizeodds'] = 0    gamesgrouped.loc[:, ['price', 'topprizeodds', 'overallodds', 'Winning Tickets At Start', 'Winning Tickets Unclaimed']] = gamesgrouped.loc[:, [        'price', 'topprizeodds', 'overallodds', 'Winning Tickets At Start', 'Winning Tickets Unclaimed']].apply(pd.to_numeric)    # create new 'prize amounts' of "$0" for non-prize tickets and "Total" for the sum of all tickets, then concat to scratcherstables    nonprizetix = gamesgrouped.loc[:,['gameNumber', 'gameName',                                'Non-prize at start', 'Non-prize remaining', 'dateexported']].copy()    nonprizetix.rename(columns={'Non-prize at start': 'Winning Tickets At Start',                       'Non-prize remaining': 'Winning Tickets Unclaimed'}, inplace=True)    nonprizetix.loc[:, 'prizeamount'] = 0    totals = gamesgrouped.loc[:,['gameNumber', 'gameName',                           'Total at start', 'Total remaining', 'dateexported']].copy()    totals.rename(columns={'Total at start': 'Winning Tickets At Start',                  'Total remaining': 'Winning Tickets Unclaimed'}, inplace=True)    totals.loc[:, 'prizeamount'] = "Total"    # loop through each scratcher game id number and add columns for each statistical calculation    alltables = pd.DataFrame()    currentodds = pd.DataFrame()    for gameid in gamesgrouped['gameNumber']:        gamerow = gamesgrouped.loc[(gamesgrouped['gameNumber'] == gameid), :]        startingtotal = int(gamerow.loc[:, 'Total at start'].values[0])        tixtotal = int(gamerow.loc[:, 'Total remaining'].values[0])        totalremain = scratchertables.loc[(scratchertables['gameNumber'] == gameid), [            'gameNumber', 'gameName', 'prizeamount', 'Winning Tickets At Start', 'Winning Tickets Unclaimed', 'dateexported']]        totalremain.loc[:, ['prizeamount', 'Winning Tickets At Start', 'Winning Tickets Unclaimed']] = totalremain.loc[:, [            'prizeamount', 'Winning Tickets At Start', 'Winning Tickets Unclaimed']].apply(pd.to_numeric)        price = int(gamerow['price'].values[0])        prizes = totalremain.loc[:, 'prizeamount']        # add various columns for the scratcher stats that go into the ratings table        gamerow.loc[:, 'Current Odds of Top Prize'] = gamerow.loc[:,                                                                  'topprizeodds']        gamerow.loc[:, 'Change in Current Odds of Top Prize'] = (gamerow.loc[:, 'Current Odds of Top Prize'] - float(            gamerow['topprizeodds'].values[0])) / float(gamerow['topprizeodds'].values[0])        gamerow.loc[:, 'Current Odds of Any Prize'] = tixtotal / \            sum(totalremain.loc[:, 'Winning Tickets Unclaimed'])        gamerow.loc[:, 'Change in Current Odds of Any Prize'] = (gamerow.loc[:, 'Current Odds of Any Prize'] - float(            gamerow['overallodds'].values[0])) / float(gamerow['overallodds'].values[0])        gamerow.loc[:, 'Odds of Profit Prize'] = tixtotal/sum(            totalremain.loc[totalremain['prizeamount'] != price, 'Winning Tickets Unclaimed'])        startingprofitodds = startingtotal / \            sum(totalremain.loc[totalremain['prizeamount']                != price, 'Winning Tickets At Start'])        gamerow.loc[:, 'Starting Odds of Profit Prize'] = startingprofitodds        gamerow.loc[:, 'Change in Odds of Profit Prize'] = (            gamerow.loc[:, 'Odds of Profit Prize'] - startingprofitodds) / startingprofitodds        gamerow.loc[:, 'Probability of Winning Any Prize'] = sum(            totalremain.loc[:, 'Winning Tickets Unclaimed'])/tixtotal        startprobanyprize = sum(            totalremain.loc[:, 'Winning Tickets At Start'])/startingtotal        gamerow.loc[:, 'Starting Probability of Winning Any Prize'] = startprobanyprize        gamerow.loc[:, 'Change in Probability of Any Prize'] = startprobanyprize - \            gamerow.loc[:, 'Probability of Winning Any Prize']        gamerow.loc[:, 'Probability of Winning Profit Prize'] = sum(            totalremain.loc[totalremain['prizeamount'] != price, 'Winning Tickets Unclaimed'])/tixtotal        startprobprofitprize = sum(            totalremain.loc[totalremain['prizeamount'] != price, 'Winning Tickets At Start'])/startingtotal        gamerow.loc[:, 'Starting Probability of Winning Profit Prize'] = startprobprofitprize        gamerow.loc[:, 'Change in Probability of Profit Prize'] = startprobprofitprize - \            gamerow.loc[:, 'Probability of Winning Profit Prize']        gamerow.loc[:, 'StdDev of All Prizes'] = totalremain.loc[:,                                                                 'Winning Tickets Unclaimed'].std().mean()/tixtotal        gamerow.loc[:, 'StdDev of Profit Prizes'] = totalremain.loc[totalremain['prizeamount']                                                                    != price, 'Winning Tickets Unclaimed'].std().mean()/tixtotal        gamerow.loc[:, 'Odds of Any Prize + 3 StdDevs'] = tixtotal / \            (gamerow.loc[:, 'Current Odds of Any Prize'] +             (totalremain.loc[:, 'Winning Tickets Unclaimed'].std().mean()*3))        gamerow.loc[:, 'Odds of Profit Prize + 3 StdDevs'] = tixtotal/(gamerow.loc[:, 'Odds of Profit Prize']+(            totalremain.loc[totalremain['prizeamount'] != price, 'Winning Tickets Unclaimed'].std().mean()*3))        gamerow.loc[:, 'Max Tickets to Buy'] = tixtotal/(totalremain.loc[totalremain['prizeamount'] != price, 'Winning Tickets Unclaimed'].sum(        )-totalremain.loc[totalremain['prizeamount'] != price, 'Winning Tickets Unclaimed'].std().mean())        # calculate expected value        totalremain.loc[:, ['prizeamount', 'Winning Tickets At Start', 'Winning Tickets Unclaimed']] = totalremain.loc[:, [            'prizeamount', 'Winning Tickets At Start', 'Winning Tickets Unclaimed']].apply(pd.to_numeric)        totalremain.loc[:, 'Starting Expected Value'] = totalremain.apply(lambda row: (            row['prizeamount']-price)*(row['Winning Tickets At Start']/startingtotal), axis=1)        totalremain.loc[:, 'Expected Value'] = totalremain.apply(lambda row: (            row['prizeamount']-price)*(row['Winning Tickets Unclaimed']/tixtotal), axis=1)        totalremain = totalremain.loc[:, ['gameNumber', 'gameName', 'prizeamount', 'Winning Tickets At Start',                                   'Winning Tickets Unclaimed', 'Starting Expected Value', 'Expected Value', 'dateexported']]        gamerow.loc[:, 'Expected Value of Any Prize (as % of cost)'] = sum(            totalremain['Expected Value'])/price if price > 0 else sum(totalremain['Expected Value'])        gamerow.loc[:, 'Change in Expected Value of Any Prize'] = ((sum(totalremain['Expected Value'])-sum(totalremain['Starting Expected Value']))/sum(            totalremain['Starting Expected Value']))/price if price > 0 else ((sum(totalremain['Expected Value'])-sum(totalremain['Starting Expected Value']))/sum(totalremain['Starting Expected Value']))        gamerow.loc[:, 'Expected Value of Profit Prize (as % of cost)'] = sum(            totalremain.loc[totalremain['prizeamount'] > price, 'Expected Value'])/price if price > 0 else sum(totalremain.loc[totalremain['prizeamount'] > price, 'Expected Value'])        gamerow.loc[:, 'Change in Expected Value of Profit Prize'] = ((sum(totalremain.loc[totalremain['prizeamount'] > price, 'Expected Value'])-sum(totalremain.loc[totalremain['prizeamount'] > price, 'Starting Expected Value']))/sum(totalremain.loc[totalremain['prizeamount'] > price, 'Starting Expected Value']))/price if price > 0 else (            sum(totalremain.loc[totalremain['prizeamount'] > price, 'Expected Value'])-sum(totalremain.loc[totalremain['prizeamount'] > price, 'Starting Expected Value']))/sum(totalremain.loc[totalremain['prizeamount'] > price, 'Starting Expected Value'])        gamerow.loc[:, 'Percent of Prizes Remaining'] = (            totalremain.loc[:, 'Winning Tickets Unclaimed']/totalremain.loc[:, 'Winning Tickets At Start']).mean()        gamerow.loc[:, 'Percent of Profit Prizes Remaining'] = (            totalremain.loc[totalremain['prizeamount'] > price, 'Winning Tickets Unclaimed']/totalremain.loc[totalremain['prizeamount'] > price, 'Winning Tickets At Start']).mean()        chngLosingTix = (gamerow.loc[:, 'Non-prize remaining']-gamerow.loc[:,                         'Non-prize at start'])/gamerow.loc[:, 'Non-prize at start']        chngAvailPrizes = (tixtotal-startingtotal)/startingtotal        try:            gamerow.loc[:,'Ratio of Decline in Prizes to Decline in Losing Ticket'] = chngLosingTix/chngAvailPrizes        except ZeroDivisionError:            gamerow.loc[:,'Ratio of Decline in Prizes to Decline in Losing Ticket'] = 0        gamerow.loc[:, 'Photo'] = tixlist.loc[tixlist['gameNumber']                                              == gameid, 'gamePhoto'].values[0]        gamerow.loc[:, 'FAQ'] = None        gamerow.loc[:, 'About'] = None        gamerow.loc[:, 'Directory'] = None        gamerow.loc[:, 'Data Date'] = gamerow.loc[:, 'dateexported']        currentodds = pd.concat([currentodds, gamerow], axis=0, ignore_index=True)        # add non-prize and totals rows with matching columns        totalremain.loc[:, 'Total remaining'] = tixtotal        totalremain.loc[:, 'Prize Probability'] = totalremain.loc[:,                                                                  'Winning Tickets Unclaimed']/totalremain.loc[:, 'Total remaining']        totalremain.loc[:, 'Percent Tix Remaining'] = totalremain.loc[:,                                                                      'Winning Tickets Unclaimed']/totalremain.loc[:, 'Winning Tickets At Start']        nonprizetix.loc[:, 'Prize Probability'] = nonprizetix.apply(lambda row: (            row['Winning Tickets Unclaimed']/tixtotal) if (row['gameNumber'] == gameid) & (row['Winning Tickets Unclaimed'] > 0) else 0, axis=1)        nonprizetix.loc[:, 'Percent Tix Remaining'] = nonprizetix.loc[nonprizetix['gameNumber'] == gameid,                                                                      'Winning Tickets Unclaimed']/nonprizetix.loc[nonprizetix['gameNumber'] == gameid, 'Winning Tickets At Start']        nonprizetix.loc[:, 'Starting Expected Value'] = (            nonprizetix['prizeamount']-price)*(nonprizetix['Winning Tickets At Start']/startingtotal)        nonprizetix.loc[:, 'Expected Value'] = (            nonprizetix['prizeamount']-price)*(nonprizetix['Winning Tickets Unclaimed']/tixtotal)        totals.loc[:, 'Prize Probability'] = totals.loc[totals['gameNumber']                                                        == gameid, 'Winning Tickets Unclaimed']/tixtotal        totals.loc[:, 'Percent Tix Remaining'] = totals.loc[totals['gameNumber'] == gameid,                                                            'Winning Tickets Unclaimed']/totals.loc[totals['gameNumber'] == gameid, 'Winning Tickets At Start']        totals.loc[:, 'Starting Expected Value'] = ''        totals.loc[:, 'Expected Value'] = ''        totalremain = totalremain.loc[:, ['gameNumber', 'gameName', 'prizeamount', 'Winning Tickets At Start', 'Winning Tickets Unclaimed',                                   'Prize Probability', 'Percent Tix Remaining', 'Starting Expected Value', 'Expected Value', 'dateexported']]        totalremain = pd.concat([totalremain, nonprizetix.loc[nonprizetix['gameNumber'] == gameid, ['gameNumber', 'gameName', 'prizeamount', 'Winning Tickets At Start',                                         'Winning Tickets Unclaimed', 'Prize Probability', 'Percent Tix Remaining', 'Starting Expected Value', 'Expected Value', 'dateexported']]], axis=0, ignore_index=True)        totalremain = pd.concat([totalremain, totals.loc[totals['gameNumber'] == gameid, ['gameNumber', 'gameName', 'prizeamount', 'Winning Tickets At Start',                                         'Winning Tickets Unclaimed', 'Prize Probability', 'Percent Tix Remaining', 'Starting Expected Value', 'Expected Value', 'dateexported']]], axis=0, ignore_index=True)        # add expected values for final totals row        allexcepttotal = totalremain.loc[totalremain['prizeamount'] != 'Total', :]        totalremain.loc[totalremain['prizeamount'] != 'Total', 'Starting Expected Value'] = allexcepttotal.apply(            lambda row: (row['prizeamount']-price)*(row['Winning Tickets At Start']/startingtotal), axis=1)        totalremain.loc[totalremain['prizeamount'] != 'Total', 'Expected Value'] = allexcepttotal.apply(            lambda row: (row['prizeamount']-price)*(row['Winning Tickets Unclaimed']/tixtotal), axis=1)        alltables = pd.concat([alltables, totalremain], axis=0)    scratchertables = alltables.loc[:, ['gameNumber', 'gameName', 'prizeamount', 'Winning Tickets At Start', 'Winning Tickets Unclaimed',                                 'Prize Probability', 'Percent Tix Remaining', 'Starting Expected Value', 'Expected Value', 'dateexported']]    # save scratchers tables    #scratchertables.to_sql('MOscratcherstables', engine, if_exists='replace')    scratchertables.to_csv("./MOscratchertables.csv", encoding='utf-8')    # create rankings table by merging the list with the tables    scratchersall.loc[:, 'price'] = scratchersall.loc[:,                                                      'price'].apply(pd.to_numeric)    ratingstable = scratchersall.merge(        currentodds, how='left', on=['gameNumber', 'price'])    ratingstable.drop(labels=['gameName_x', 'dateexported_y', 'overallodds_y',                      'topprizeremain_x'], axis=1, inplace=True)    ratingstable.rename(columns={'gameName_y': 'gameName', 'dateexported_x': 'dateexported', 'topprizeodds_x': 'topprizeodds',                        'overallodds_x': 'overallodds', 'topprizeremain_y': 'topprizeremain'}, inplace=True)        # --- Start of FIX for date parsing ---    # Define the expected format for 'startDate' for Missouri Lottery    mo_start_date_format = "%b. %d, %Y" # e.g., "Apr. 28, 2025"    # Convert 'dateexported' and 'startDate' to datetime series.    # 'dateexported' contains Python date objects from date.today(), pd.to_datetime handles these.    # 'startDate' contains strings that need the specified format.    # Using errors='coerce' will turn unparseable dates into NaT.        # Prepare default NaT series in case columns are missing (defensive coding)    col_dateexported_dt = pd.Series([pd.NaT] * len(ratingstable), index=ratingstable.index)     if 'dateexported' in ratingstable.columns:        col_dateexported_dt = pd.to_datetime(ratingstable['dateexported'], errors='coerce')    col_startDate_dt = pd.Series([pd.NaT] * len(ratingstable), index=ratingstable.index)    if 'startDate' in ratingstable.columns:        col_startDate_dt = pd.to_datetime(ratingstable['startDate'], format=mo_start_date_format, errors='coerce')        # Original print statements for debugging (can be removed or updated)    # print(col_dateexported_dt.dtype)    # print(col_startDate_dt.dtype)        # Calculate 'Days Since Start' using the converted datetime series    ratingstable.loc[:, 'Days Since Start'] = (col_dateexported_dt - col_startDate_dt).dt.days    # --- End of FIX for date parsing ---        # add rankings columns of all scratchers to ratings table    ratingstable['Rank by Best Probability of Winning Any Prize'] = (ratingstable['Current Odds of Any Prize'].rank(    )+ratingstable['Probability of Winning Any Prize'].rank()+ratingstable['Odds of Any Prize + 3 StdDevs'].rank())/3    ratingstable['Rank by Best Probability of Winning Profit Prize'] = (ratingstable['Odds of Profit Prize'].rank(    )+ratingstable['Probability of Winning Profit Prize'].rank()+ratingstable['Odds of Profit Prize + 3 StdDevs'].rank())/3    ratingstable['Rank by Least Expected Losses'] = (ratingstable['Expected Value of Any Prize (as % of cost)'].rank(    )+ratingstable['Expected Value of Profit Prize (as % of cost)'].rank())/2    ratingstable['Rank by Most Available Prizes'] = (ratingstable['Percent of Prizes Remaining'].rank(    )+ratingstable['Percent of Profit Prizes Remaining'].rank()+ratingstable['Ratio of Decline in Prizes to Decline in Losing Ticket'].rank())/3    ratingstable['Rank by Best Change in Probabilities'] = (ratingstable['Change in Current Odds of Any Prize'].rank()+ratingstable['Change in Current Odds of Top Prize'].rank()                                                            + ratingstable['Change in Probability of Any Prize'].rank(    )+ratingstable['Change in Probability of Profit Prize'].rank()        + ratingstable['Expected Value of Any Prize (as % of cost)'].rank()+ratingstable['Expected Value of Profit Prize (as % of cost)'].rank())/6    ratingstable.loc[:, 'Rank Average'] = ratingstable.loc[:,                                                           'Rank by Best Probability of Winning Any Prize':'Rank by Best Change in Probabilities'].mean(axis=1)    ratingstable.loc[:, 'Overall Rank'] = ratingstable.loc[:,                                                           'Rank Average'].rank()    ratingstable.loc[:, 'Rank by Cost'] = ratingstable.groupby(        'price')['Overall Rank'].rank('dense', ascending=True)    # columns in ratingstable to round to only two decimals    twodecimalcols = ['Current Odds of Any Prize', 'Odds of Profit Prize',                      'Percent of Prizes Remaining', 'Expected Value of Any Prize (as % of cost)']    ratingstable[twodecimalcols] = ratingstable[twodecimalcols].round(2)    ratingstable['Max Tickets to Buy'] = ratingstable['Max Tickets to Buy'].round(        0)    # save ratingstable    ratingstable['Stats Page'] = "/missouri-statistics-for-each-scratcher-game"    #ratingstable.to_sql('MOratingstable', engine, if_exists='replace')    ratingstable.to_csv("./MOratingstable.csv", encoding='utf-8')    ratingstable = ratingstable.loc[:, ['price', 'gameName', 'gameNumber', 'topprize', 'topprizeremain', 'topprizeavail', 'extrachances', 'secondChance',                                 'startDate', 'Days Since Start', 'lastdatetoclaim', 'topprizeodds', 'overallodds', 'Current Odds of Top Prize',                                 'Change in Current Odds of Top Prize', 'Current Odds of Any Prize',                                 'Change in Current Odds of Any Prize', 'Odds of Profit Prize', 'Change in Odds of Profit Prize',                                 'Probability of Winning Any Prize', 'Change in Probability of Any Prize',                                 'Probability of Winning Profit Prize', 'Change in Probability of Profit Prize',                                 'StdDev of All Prizes', 'StdDev of Profit Prizes', 'Odds of Any Prize + 3 StdDevs',                                 'Odds of Profit Prize + 3 StdDevs', 'Max Tickets to Buy',                                 'Expected Value of Any Prize (as % of cost)',                                 'Change in Expected Value of Any Prize',                                 'Expected Value of Profit Prize (as % of cost)',                                 'Change in Expected Value of Profit Prize',                                 'Percent of Prizes Remaining', 'Percent of Profit Prizes Remaining',                                 'Ratio of Decline in Prizes to Decline in Losing Ticket',                                 'Rank by Best Probability of Winning Any Prize',                                 'Rank by Best Probability of Winning Profit Prize',                                 'Rank by Least Expected Losses', 'Rank by Most Available Prizes',                                 'Rank by Best Change in Probabilities', 'Rank Average', 'Overall Rank', 'Rank by Cost',                                 'Photo', 'FAQ', 'About', 'Directory',                                 'Data Date', 'Stats Page','gameURL']]    ratingstable.replace([np.inf, -np.inf], 0, inplace=True)    ratingstable.fillna('', inplace=True)    return ratingstable, scratchertables#exportScratcherRecs()